name: Deploy Sat Scan API to Amazon ECS

on:
  push:
    branches:
      - terraform

env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY: "sat-scan" # Amazon ECR repository name
  ECS_CLUSTER: sat-scan-cluster # Amazon ECS cluster name
  ECS_SERVICE: sat-scan-api-service # Amazon ECS service name
  ECS_TASK_DEFINITION: ../../infrastructure/aws/task-definitions/sat-scan-api-container.json
  CONTAINER_NAME: sat-scan-api-container # Name specified in containerDefinitions section of task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CLIENT_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLIENT_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create credentials.ini
        env:
          SAT_SCAN_API_KEY: ${{ secrets.SAT_SCAN_API_KEY }}
        run: |
          cd applications/sat-scan-api

          cat <<EOF > credentials.ini
          [api-keys]
          keys="$SAT_SCAN_API_KEY"
          EOF

          echo "Created .credentials.ini"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd applications/sat-scan-api
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
